---

- file: path=/tmp/jenkins state=directory
- copy: src=service.yml dest=/tmp/jenkins/service.yml
- copy: src=rc.yml dest=/tmp/jenkins/rc.yml

- name: apply jenkins service
  shell: |
    kubectl apply -f /tmp/jenkins
  become: yes
  register: apply_jenkins_result
  changed_when: false

- name: purge exist jenkins
  shell: |
    POD=$(kubectl get po -l name=jenkins --no-headers | grep -i 'running' | awk '{ print $1}')
    kubectl exec -it ${POD} -- bash -c 'rm -rf /var/jenkins_home/*'
    kubectl exec -it ${POD} -- bash -c 'rm -rf /var/jenkins_home/.*'
    kubectl delete po ${POD} --grace-period=0
  args:
    executable: /bin/bash
  changed_when: false
  become: yes
  register: pruge_result

- debug: var=pruge_result

- name: find jenkins pod
  shell: |
    kubectl get po -l name=jenkins --no-headers | grep -i 'running' | awk '{ print $1}'
  args:
    executable: /bin/bash
  register: get_jenkins_po
  until: (get_jenkins_po.stdout != '') and (get_jenkins_po.rc == 0)
  changed_when: false
  retries: 1000
  delay: 5
  become: yes

- shell: kubectl describe po {{ get_jenkins_po.stdout }} | grep -i 'ip:' | awk '{ print $2 }'
  register: jenkins_pod_ip
  changed_when: false
  failed_when: jenkins_pod_ip.stdout == ''
  become: yes

- wait_for: host={{ jenkins_pod_ip.stdout }} port=8080 state=started delay=3 timeout=600 connect_timeout=30

- uri: 
    url: "http://{{ jenkins_pod_ip.stdout }}:8080/api/json?pretty=true"
    method: GET
    status_code: 200
    return_content: yes
  register: result
  until: result.status == 200
  changed_when: false
  retries: 100
  delay: 5


- set_fact:
    jenkins_pod: "{{ get_jenkins_po.stdout }}"
    jenkins_pre_install_plugins: "[ 'github', 'kubernetes' ]"

- name: list plugins
  become: yes
  shell: |
    kubectl exec -it {{ jenkins_pod }} -- java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://127.0.0.1:8080/ list-plugins | awk '{ print $1}'
  register: jenkins_plugins
  changed_when: false

- name: install plugins
  become: yes
  shell: |
    kubectl exec -it {{ jenkins_pod }} -- java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://127.0.0.1:8080/ install-plugin {{ item }}
  notify: 
    - safe-restart jenkins
  when: "{{ item not in jenkins_plugins.stdout_lines }}"
  with_items: "{{ jenkins_pre_install_plugins }}"

- name: list plugins which need update
  become: yes
  shell: |
    kubectl exec -it {{ jenkins_pod }} -- java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://127.0.0.1:8080/ list-plugins | grep -e '(.*)' | awk '{ print $1}'
  register: jenkins_plugins
  changed_when: false

- set_fact:
    upgradable_plugins_list: "{{ jenkins_plugins.stdout_lines | join(' ') }}"

- name: upgrade plugins
  become: yes
  shell: |
    kubectl exec -it {{ jenkins_pod }} -- java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://127.0.0.1:8080/ install-plugin {{ upgradable_plugins_list }}
  notify: 
    - safe-restart jenkins
  when: "jenkins_plugins.stdout_lines | length > 0"
  
- name: jenkins health check
  become: yes
  shell: |
    kubectl exec -it {{ jenkins_pod }} -- java -jar /var/jenkins_home/war/WEB-INF/jenkins-cli.jar -s http://127.0.0.1:8080/ version
  register: jenkins_helth_check
  until: jenkins_helth_check.rc == 0
  retries: 1000
  delay: 5
  changed_when: false

- debug: msg="jenkins version {{ jenkins_helth_check.stdout }}"
  when: jenkins_helth_check.rc == 0

# - set_fact:
#     config_xml: "{{ lookup('file', 'jenkins_config.xml') }}"

# - shell:
#     kubectl exec -it {{ jenkins_pod }} -- which gosu
#   become: yes
#   register: r

# - shell:
#     kubectl exec -it {{ jenkins_pod }} -- gosu chmod +w /var/jenkins_home
#   become: yes
#   register: r

# - debug: var=config_xml
# - debug: var=r



